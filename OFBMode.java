import static java.util.Arrays.copyOfRange;

//import jdk.nashorn.internal.ir.Block;

//import jdk.nashorn.internal.ir.Block;

class OFBMode {
    private static int[] text =new int[35];

    static int[] cipher(int[] key, String text, int crypt, int[] IV) {
        int[] plainBin;
        if(crypt == 0) {
            plainBin = BlockCipher.stringToBinaryArray(text);
        }else{
            plainBin = BlockCipher.binaryStringToBinaryArray(text);
        }
        int[] cipherText = new int[plainBin.length];
        encrypt(key, plainBin, IV, cipherText);
        return cipherText;
    }

    private static void encrypt(int[] keyBin, int[] plainBin, int[] IV, int[] cipherText) {
        int[] temp; //Holds encrypted block
        int[] tempBin; //Holds plaintext to be encrypted
        int l = plainBin.length; //Readability
        initialEncryption(keyBin, plainBin, IV, cipherText); //Initial run of encryption
        for (int i = 1; i < l / 35; i++) { //For each block after the first
            temp = BlockCipher.Encrypt(text, keyBin); //Encrypt result of last encryption with key
            System.arraycopy(temp, 0, text, 0, 35); //Overwrite text with result for next block
            tempBin = copyOfRange(plainBin, (i * 35), ((i * 35) + 35)); //Copy plaintext block into tempBin
            //XOR plaintext block and encryption result, then copy result to resulting ciphertext
            System.arraycopy((BlockCipher.addBinaryArrays(tempBin,temp)), 0, cipherText, (i * 35), 35);
        }
//        if (l % 35 != 0) { //Handles overflow
//            tempBin = copyOfRange(plainBin, (l - l % 35), l);
//            int[] newInput = BlockCipher.addBinaryArrays(tempBin, text);
//            temp = BlockCipher.Encrypt(newInput, keyBin);
//            System.arraycopy(temp, 0, cipherText, (l - l % 35), temp.length);
//        }
    }

    private static void initialEncryption(int[] keyBin, int[] plainBin, int[] IV, int[] cipherText) {
        int[] temp; //Holds encrypted block
        int[] tempBin; //Holds plaintext block
        temp = BlockCipher.Encrypt(IV,keyBin); //Store result of encryption
        System.arraycopy(temp,0, text,0,35); //Copy result for next block
        tempBin = copyOfRange(plainBin, 0, 35); //Copy plaintext block
        //XOR plaintext block and encryption result, then copy result to resulting ciphertext
        System.arraycopy((BlockCipher.addBinaryArrays(tempBin,temp)),0,cipherText,0,35);
    }
    //Current test doesn't work because I think the group that I got ciphertext from didn't have a proper OFB mode. Otherwise works fine for manual encrypt then decrypt.
    public static void main(String[] args) { //Test encrypt and decrypt
        String text
        int[] key = new int[]{1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1};
        int[] IV = new int[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//        String result = BlockCipher.binaryArrayConvertToASCII(OFBMode.cipher(key, text, 0, IV));
//        System.out.println("Result: " + result);
//        int[] test = BlockCipher.stringToBinaryArray(result);
//        String txt = BlockCipher.binaryArraytoBinaryString(test);
        String result2 = BlockCipher.binaryArrayConvertToASCII(OFBMode.cipher(key, text, 1, IV));
        System.out.println("Result: " + result2);

        
        OFBtest();
    }
    //test for 1-bit error.
    public static void OFBtest(){
        // setup
        System.out.println("\n\n\n start OFB test---------------------------------------------------------");
        String text = "I am happy to join with you today in what will go down in history as the greatest demonstration";
        int[] key = new int[]{1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1};
        int[] IV = new int[]{0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0};

        //encrpyt
        String result = BlockCipher.binaryArrayConvertToASCII(OFBMode.cipher(key, text, 0, IV));
        //System.out.println(result);
        int[] encrypted = BlockCipher.stringToBinaryArray(result);

        BlockCipher.printIntArray(encrypted);
        // 1-bit error: change bit 10 from original.
        int[] original = BlockCipher.stringToBinaryArray(text);
        if(original[10] == 1){
            original[10] = 0;
        } else{
            original[10] = 1;
        }
        String augmentedText = BlockCipher.binaryArrayConvertToASCII(original);

        String newResult = BlockCipher.binaryArrayConvertToASCII(OFBMode.cipher(key, augmentedText, 0, IV));
        int[] encrypted2 = BlockCipher.stringToBinaryArray(newResult);
        BlockCipher.printIntArray(encrypted2);

    }

}