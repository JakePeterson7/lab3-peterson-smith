import java.io.FileWriter;
import java.io.IOException;

import static java.util.Arrays.copyOfRange;

class CBCMode {
    private static int[] XORtext = new int[35]; //Used for storing result of encrypt for future blocks

    static int[] cipher(int[] key, String text, int crypt, int[] IV) {
        int[] plainBin;
        if(crypt == 0) {
            plainBin = BlockCipher.stringToBinaryArray(text);
        }else{
            plainBin = BlockCipher.binaryStringToBinaryArray(text); //Turns a binary string to a binary array
        }
        int[] cipherText = new int[plainBin.length]; //Initialize int array for storing result
        if (crypt == 1) { //Look at which time of cryption that is being asked, then do the specified one
            decrypt(key, plainBin, IV, cipherText); //Decrypt cipherText
        } else {
            encrypt(key, plainBin, IV, cipherText); //Encrypt plaintext
        }
        return cipherText; //Return resulting text
    }

    public static void encrypt(int[] keyBin, int[] plainBin, int[] IV, int[] cipherText) {
        int[] temp; //Holds encrypted block
        int[] tempBin; //Holds plaintext to be encrypted
        int l = plainBin.length; //Readability
        initialEncryption(keyBin, plainBin, IV, cipherText); //Initial run of encryption
            for (int i = 1; i < l / 35; i++) { //For each block after the first
                tempBin = copyOfRange(plainBin, (i * 35), ((i * 35) + 35)); //Copy plaintext block into tempBin
                int[] newInput = BlockCipher.addBinaryArrays(tempBin, XORtext); //XOR plaintext and saved XORtext
                temp = BlockCipher.Encrypt(newInput, keyBin); //Encrypt result of XOR with key
                System.arraycopy(temp, 0, cipherText, (i * 35), 35); //Copy result to resulting ciphertext
                System.arraycopy(temp, 0, XORtext, 0, 35); //Overwrite XORtext with result for further encryption
            }
//            if (l % 35 != 0) { //Handles overflow
//                tempBin = copyOfRange(plainBin, (l - l % 35), l);
//                int[] newInput = BlockCipher.addBinaryArrays(tempBin, XORtext);
//                temp = BlockCipher.Encrypt(newInput, keyBin);
//                System.arraycopy(temp, 0, cipherText, (l - l % 35), temp.length);
//            }
    }

    public static void initialEncryption(int[] keyBin, int[] plainBin, int[] IV, int[] cipherText) {
        int[] temp; //Holds encrypted block
        int[] tempBin; //Holds plaintext to be encrypted
        tempBin = copyOfRange(plainBin, 0,  35); //Copy plaintext block into tempBin
        int[] newInput = BlockCipher.addBinaryArrays(tempBin, IV); //XOR plaintext and IV
        temp = BlockCipher.Encrypt(newInput, keyBin); //Encrypt result of XOR with key
        System.arraycopy(temp, 0, XORtext, 0, 35); //Copy result of encrypt for future XORs
        System.arraycopy(temp, 0, cipherText, 0, 35); //Copy result to resulting ciphertext
    }

    public static void decrypt(int[] keyBin, int[] plainBin, int[] IV, int[] cipherText) {
        int[] temp; //Holds encrypted block
        int[] tempBin; //Holds plaintext to be encrypted
        int l = plainBin.length; //Readability
        initialDecryption(keyBin, plainBin, IV, cipherText); //Initial run of decryption
            for (int i = 1; i < l / 35; i++) { //For each block after the first
//                System.out.println("i: " + i);
                tempBin = copyOfRange(plainBin, (i * 35), ((i * 35) + 35)); // Copy ciphertext block into tempBin
                temp = BlockCipher.Decrypt(tempBin, keyBin); //Decrypt ciphertext with key
                int[] newInput = BlockCipher.addBinaryArrays(temp, XORtext); //XOR result of decrption with last block ciphertext
                System.arraycopy(newInput, 0, cipherText, (i * 35), 35); //Copy result of decrypt to resulting plaintext
                System.arraycopy(tempBin, 0, XORtext, 0, 35); //Copy ciphertext from this block for next block
            }
//            if (l % 35 != 0) { //Handles overflow
//                tempBin = copyOfRange(plainBin, (l - l % 35), l);
//                temp = BlockCipher.Decrypt(tempBin, keyBin);
//                int[] newInput = BlockCipher.addBinaryArrays(temp, XORtext);
//                System.arraycopy(newInput, 0, cipherText, (l - l % 35), temp.length);
//            }
    }

    public static void initialDecryption(int[] keyBin, int[] plainBin, int[] IV, int[] cipherText) {
        int[] temp; //Holds encrypted block
        int[] tempBin; //Holds plaintext to be encrypted
        System.arraycopy(plainBin, 0, XORtext, 0, 35); //Copy ciphertext block for next block
        tempBin = copyOfRange(plainBin, 0,  35); //Copy ciphertext block into tempBin
        int[] newInput = BlockCipher.Decrypt(tempBin, keyBin); //Decrypt result of XOR with key
        temp = BlockCipher.addBinaryArrays(newInput, IV); //XOR ciphertext with IV
        System.arraycopy(temp, 0, cipherText, 0, 35); //Copy result of decrypt to resulting plaintext
    }

    public static void main(String[] args) throws IOException { //Test encrypt and decrypt
//        String text
        String text = "When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton. Bilbo was very rich and very peculiar, and had been the wonder of the Shire for sixty years, ever since his remarkable disappearance and unexpected return. The riches he had brought back from his travels had now become a local legend, and it was popularly believed, whatever the old folk might say, that the Hill at Bag End was full of tunnels stuffed with treasure. And if that was not enough for fame, there was also his prolonged vigour to marvel at. Time wore on, but it seemed to have little effect on Mr. Baggins. At ninety he was much the same as at fifty. At ninety-nine they began to call him well-preserved, but unchanged would have been nearer the mark. There were some that shook their heads and thought this was too much of a good thing; it seemed unfair that anyone should possess (apparentl";
        int[] key = BlockCipher.stringToBinaryArray("pvvhd");
        int[] IV = BlockCipher.stringToBinaryArray("neifg");
        CBCMode CBC = new CBCMode();
        String result = BlockCipher.binaryArrayToBinaryString(CBC.cipher(key, text, 0, IV));
        System.out.println("Result: " + result);
//        String result2 = BlockCipher.binaryArrayConvertToASCII(CBC.cipher(key, txt, 1, IV));
//        System.out.println("Result: " + result2);
        FileWriter myWriter = new FileWriter("filename.txt");
        myWriter.write(result);
        myWriter.close();
        System.out.println("Wrote to file!");
        CBCtest();
    }

    //test for 1-bit error.
    public static void CBCtest(){
        // setup
        System.out.println("\n\n\n start CBC test---------------------------------------------------------");
        String text = "I am happy to join with you today in what will go down in history as the greatest demonstration";
        int[] key = new int[]{1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1};
        int[] IV = new int[]{0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0};

        //encrpyt
        String result = BlockCipher.binaryArrayConvertToASCII(CBCMode.cipher(key, text, 0, IV));
        //System.out.println(result);
        int[] encrypted = BlockCipher.stringToBinaryArray(result);

        BlockCipher.printIntArray(encrypted);
        System.out.println();
        // 1-bit error: change bit 10 from original.
        int[] original = BlockCipher.stringToBinaryArray(text);
        if(original[10] == 1){
            original[10] = 0;
        } else{
            original[10] = 1;
        }
        String augmentedText = BlockCipher.binaryArrayConvertToASCII(original);

        String newResult = BlockCipher.binaryArrayConvertToASCII(CBCMode.cipher(key, augmentedText, 0, IV));
        int[] encrypted2 = BlockCipher.stringToBinaryArray(newResult);
        BlockCipher.printIntArray(encrypted2);

    }
}
