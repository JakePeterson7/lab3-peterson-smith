import static java.util.Arrays.copyOfRange;

class ECBMode {
    static int[] ECB(int[] key, String text, int crypt) {
        int[] plainBin; //Initialize int array
        if(crypt == 0) { //The rest of this is fairly obvious based on the other modes comments
            plainBin = BlockCipher.stringToBinaryArray(text);
        }else{
            plainBin = BlockCipher.binaryStringToBinaryArray(text);
        }
        int[] cipherText = new int[plainBin.length];
        if (crypt == 0) {
            encrypt(key, plainBin, cipherText);
        } else {
            decrypt(key, plainBin, cipherText);
        }
        return cipherText;
    }

    private static void decrypt(int[] keyBin, int[] plainBin, int[] cipherText) {
        //This method processes and decrypts each block of text
        int[] temp; //Initialize int arrays
        int[] tempBin;
        int l = plainBin.length; //Store int of plainBin's length for readability in further functions
        for (int i = 0; i < l / 35; i++) { //Decryption on each block of 35
            tempBin = copyOfRange(plainBin, (i * 35), ((i * 35) + 35)); //Copy ciphertext
            temp = BlockCipher.Decrypt(tempBin, keyBin); //Block decryption
            System.arraycopy(temp, 0, cipherText, (i * 35), temp.length); //Copy decryption result to resulting plaintext
        }
//        if (l % 35 != 0) { //Handle overflow
//            tempBin = copyOfRange(plainBin, (l - l % 35), l);
//            temp = BlockCipher.Decrypt(tempBin, keyBin);
//            System.arraycopy(temp, 0, cipherText, (l - l % 35), temp.length);
//        }
    }

    private static void encrypt(int[] keyBin, int[] plainBin, int[] cipherText) {
        //This method processes and encrypts each block of text, very similar to decrypt
        int[] temp;
        int[] tempBin;
        int l = plainBin.length;
        for (int i = 0; i < l / 35; i++) {
            tempBin = copyOfRange(plainBin, (i * 35), ((i * 35) + 35));
            temp = BlockCipher.Encrypt(tempBin, keyBin);
            System.arraycopy(temp, 0, cipherText, (i * 35), temp.length);
        }
//        if (l % 35 != 0) { //Handle overflow
//            tempBin = copyOfRange(plainBin, (l - l % 35), l);
//            temp = BlockCipher.Encrypt(tempBin, keyBin);
//            System.arraycopy(temp, 0, cipherText, (l - l % 35), temp.length);
//        }
    }

    public static void main(String[] args) { //Test encrypt and decrypt
        String binary
        int[] key = new int[]{1,0,0,1,1,0,1,1,1,0,0,1,0,1,1,1,1,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,0,1};
        //        String result = BlockCipher.BinaryArrayToString(ECB(key, text, 0));
        //        System.out.println(result);
        String result2 = BlockCipher.binaryArrayConvertToASCII(ECB(key, binary, 1));
        System.out.println(result2);

        ECBtest();

    }

    //test for 1-bit error.
    public static void ECBtest(){
        // setup
        System.out.println("\n\n\n start ECB test---------------------------------------------------------");
        String text = "I am happy to join with you today in what will go down in history as the greatest demonstration";
        int[] key = new int[]{1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1};
        int[] IV = new int[]{0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0};

        //encrpyt
        String result = BlockCipher.binaryArrayConvertToASCII(ECBMode.ECB(key, text, 0));
        //System.out.println(result);
        int[] encrypted = BlockCipher.stringToBinaryArray(result);

        BlockCipher.printIntArray(encrypted);
        System.out.println();
        // 1-bit error: change bit 10 from original.
        int[] original = BlockCipher.stringToBinaryArray(text);
        if(original[3] == 0){
            original[3] = 1;
        } else{
            original[3] = 0;
        }
        String augmentedText = BlockCipher.binaryArrayConvertToASCII(original);

        String newResult = BlockCipher.binaryArrayConvertToASCII(ECBMode.ECB(key, augmentedText, 0));
        //System.out.println(newResult);

        int[] encrypted2 = BlockCipher.stringToBinaryArray(newResult);
        BlockCipher.printIntArray(encrypted2);

    }
}
